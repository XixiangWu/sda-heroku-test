package au.edu.unimelb.cis.swen90007.itsms.database;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The DepartmentGateway class provides a data-layer interface between
 * local Department objects and database Department objects, including
 * methods fot creating, updating, and deleting Department object data
 * in the connected database.
 */
public class DepartmentGateway implements IGateway {

    private int id;
    private String departmentName;
    private String location;

    private static final String updateDepartmentString =
            "UPDATE APP.departments SET department_name = ?, location = ?" +
                    " WHERE id = ?";

    private static final String insertDepartmentString =
            "INSERT INTO APP.departments(department_name, location)" +
                    " VALUES (?, ?)";

    private static final String deleteDepartmentString =
            "DELETE FROM APP.departments WHERE id = ?";

    public DepartmentGateway(int id, String departmentName, String location) {
        this.id = id;
        this.departmentName = departmentName;
        this.location = location;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDepartmentName() {
        return departmentName;
    }

    public void setDepartmentName(String departmentName) {
        this.departmentName = departmentName;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Creates a new DepartmentGateway object based on data retrieved
     * from the connected database.
     * @param rs the results from the database retrieval query.
     * @return a DepartmentGateway with data from the provided database
     *           results.
     * @throws SQLException
     */
    public static DepartmentGateway load(ResultSet rs) throws SQLException {
        int idArg = rs.getInt(1);
        String nameArg = rs.getString(2);
        String locationArg = rs.getString(3);

        DepartmentGateway result = new DepartmentGateway(idArg, nameArg, locationArg);
        Registry.addDepartment(result);
        return result;
    }

    /**
     * Attempts to insert the data of the DepartmentGateway into the
     * connected database.
     * @return the new id returned by the database.
     */
    public int insert() {
        ResultSet autoGenerated = null;
        PreparedStatement insertStatement = null;
        try {
            insertStatement = DBConnection.prepare(insertDepartmentString,
                    PreparedStatement.RETURN_GENERATED_KEYS);
            insertStatement.setString(1, getDepartmentName());
            insertStatement.setString(2, getLocation());
            insertStatement.executeUpdate();

            autoGenerated = insertStatement.getGeneratedKeys();
            if (autoGenerated.next()) {
                setId(autoGenerated.getInt(1));
            }

            Registry.addDepartment(this);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return getId();
    }

    /**
     * Attempts to update the data of the corresponding Department entry in the
     * connected database with the data from the DepartmentGateway object.
     */
    public void update() {
        PreparedStatement updateStatement = null;
        try {
            updateStatement = DBConnection.prepare(updateDepartmentString);
            updateStatement.setString(1, getDepartmentName());
            updateStatement.setString(2, getLocation());
            updateStatement.setInt(3, getId());
            updateStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Attempts to delete the corresponding Department entry in the
     * connected database.
     */
    public void delete() {
        PreparedStatement deleteStatement = null;
        try {
            deleteStatement = DBConnection.prepare(deleteDepartmentString);
            deleteStatement.setInt(1, getId());
            deleteStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
