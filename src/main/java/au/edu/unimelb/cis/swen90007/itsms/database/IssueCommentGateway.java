package au.edu.unimelb.cis.swen90007.itsms.database;

import au.edu.unimelb.cis.swen90007.itsms.domain.IssueComment;
import au.edu.unimelb.cis.swen90007.itsms.domain.IssueStatus;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

/**
 * The IssueCommentGateway class provides a data-layer interface between
 * local IssueComment objects and database IssueComment objects, including
 * methods fot creating, updating, and deleting IssueComment object data
 * in the connected database.
 */
public class IssueCommentGateway implements IGateway {

    private int id;
    private int issueId;
    private int posterId;
    private String content;
    private Timestamp timeSubmitted;

    private static final String updateIssueCommentStatement =
            "UPDATE APP.issue_comments" +
                    " SET content = ?" +
                    " WHERE id = ?";

    private static final String insertIssueCommentStatement =
            "INSERT INTO APP.issue_comments(issue_id, poster_id, content, time_submitted)" +
                    " VALUES (?, ?, ?, ?)";

    private static final String deleteIssueCommentStatement =
            "DELETE FROM APP.issue_comments WHERE id = ?";

    public IssueCommentGateway(int id, int issueId, int posterId,
                               String content, Timestamp timeSubmitted) {
        this.id = id;
        this.issueId = issueId;
        this.posterId = posterId;
        this.content = content;
        this.timeSubmitted = timeSubmitted;
    }

    public IssueCommentGateway(int issueId, int posterId, String content,
                               Timestamp timeSubmitted) {
        this.issueId = issueId;
        this.posterId = posterId;
        this.content = content;
        this.timeSubmitted = timeSubmitted;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getIssueId() {
        return issueId;
    }

    public void setIssueId(int issueId) {
        this.issueId = issueId;
    }

    public int getPosterId() {
        return posterId;
    }

    public void setPosterId(int posterId) {
        this.posterId = posterId;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Timestamp getTimeSubmitted() {
        return timeSubmitted;
    }

    public void setTimeSubmitted(Timestamp timeSubmitted) {
        this.timeSubmitted = timeSubmitted;
    }

    /**
     * Creates a new IssueCommentGateway object based on data retrieved
     * from the connected database.
     * @param rs the results from the database retrieval query.
     * @return an IssueCommentGateway with data from the provided database
     *           results.
     * @throws SQLException
     */
    public static IssueCommentGateway load(ResultSet rs) throws SQLException {
        int idArg = rs.getInt(1);
        int issueIdArg = rs.getInt(2);
        int posterIdArg = rs.getInt(3);
        String contentArg = rs.getString(4);
        Timestamp timeSubmittedArg = rs.getTimestamp(5);

        IssueCommentGateway result =  new IssueCommentGateway(idArg, issueIdArg,
                posterIdArg, contentArg, timeSubmittedArg);
        Registry.addIssueComment(result);
        return result;
    }

    /**
     * Attempts to update the data of the corresponding IssueComment entry in
     * the connected database with the data from the IssueCommentGateway object.
     */
    public void update() {
        PreparedStatement updateStatement = null;
        try {
            updateStatement = DBConnection.prepare(updateIssueCommentStatement);
            updateStatement.setString(1, getContent());
            updateStatement.setInt(2, getId());
            updateStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Attempts to delete the corresponding IssueComment entry in the
     * connected database.
     */
    public void delete() {
        PreparedStatement deleteStatement = null;
        try {
            deleteStatement = DBConnection.prepare(deleteIssueCommentStatement);
            deleteStatement.setInt(1, getId());
            deleteStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Attempts to insert the data of the IssueCommentGateway into the
     * connected database.
     * @return the new id returned by the database.
     */
    public int insert() {
        ResultSet autoGenerated = null;
        PreparedStatement insertStatement = null;
        try {
            insertStatement = DBConnection.prepare(insertIssueCommentStatement,
                    PreparedStatement.RETURN_GENERATED_KEYS);
            insertStatement.setInt(1, getIssueId());
            insertStatement.setInt(2, getPosterId());
            insertStatement.setString(3, getContent());
            insertStatement.setTimestamp(4, getTimeSubmitted());
            insertStatement.executeUpdate();

            autoGenerated = insertStatement.getGeneratedKeys();
            if (autoGenerated.next()) {
                setId(autoGenerated.getInt(1));
            }

            Registry.addIssueComment(this);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return getId();
    }


}
